'use strict';

const S3270 = require('..');
const fs = require('fs');

const terminal = S3270.connect('fandezhi.efglobe.com');

terminal.status().then((status) => { console.log(JSON.stringify(status)) });
terminal.sendCommand("readbuffer(ascii)")
    .then((ascii) => { return saveScreen(ascii, "welcome.scr"); });

terminal.sendKeys("TSO");
terminal.sendCommand("readbuffer(ascii)")
    .then((ascii) => { return saveScreen(ascii, "tso.scr"); });
//terminal.sendCommand("ascii").then((ascii) => { console.log(ascii) });

terminal.sendCommand("enter");
terminal.sendCommand("wait(InputField)");
terminal.sendCommand("readbuffer(ascii)")
    .then((ascii) => { return saveScreen(ascii, "username.scr"); });
//terminal.sendCommand("ascii").then((ascii) => { console.log(ascii) });

terminal.sendKeys("PRASV");
terminal.sendCommand("enter");
terminal.sendCommand("wait(InputField)");
//terminal.sendCommand("ascii").then((ascii) => { console.log(ascii) });
terminal.sendCommand("readbuffer(ascii)")
    .then((ascii) => { return saveScreen(ascii, "login.scr"); })
    .then(() => { console.log("Processing complete"); process.exit(0); });

function saveScreen(ascii, filename) {
    return createScreensDir()
        .then((path) => openFile(path + "/" + filename))
        .then((fd) => writeData(fd, ascii));
}

function writeData(fd, data) {
    return new Promise((resolve, reject) => {
        fs.write(fd, data, (err) => {
            if (err) {
                return reject(err);
            } else {
                return resolve();
            }
        });
    });
}

function openFile(filename) {
    return new Promise((resolve, reject) => {
        fs.open(filename, "w", (err, fd) => {   
            if (err) {
                return reject(err);
            } else {
                return resolve(fd);
            }
        });
    });
}

function createScreensDir() { 
    return new Promise((resolve, reject) => {
        const dirPath = __dirname + "/screens";
        fs.mkdir(dirPath, (err) => {
            if (err && err.code == 'EEXIST') {
                return resolve(dirPath);
            } else if (err) { 
                return reject(err);
            } else {
                return resolve(dirPath);
            }
        });
    });
}